name: Validate AI MindLayer

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  validate-schema:
    runs-on: ubuntu-latest
    name: Validate .ai.json Schema

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Generate package-lock.json
        run: npm install --package-lock-only

      - name: Install dependencies
        run: npm ci

      - name: Validate JSON syntax
        run: |
          echo "Validating JSON syntax..."
          node node_modules/jsonlint-mod/lib/cli.js .ai.json.example
          if [ -f ".ai.json" ]; then
            node node_modules/jsonlint-mod/lib/cli.js .ai.json
          fi

      - name: Validate against schema
        run: |
          echo "Validating against schema..."
          npm run validate:example
          if [ -f ".ai.json" ]; then
            npm run validate -- .ai.json
          fi

      - name: Check documentation links
        run: |
          echo "Checking documentation..."
          test -f README.md
          test -f INSTALL.md
          test -f AI-INTEGRATION.md
          test -f LICENSE
          test -f CONTRIBUTING.md
          test -f CHANGELOG.md
          test -f TODO.md
          echo "All documentation files exist"

  lint-php:
    runs-on: ubuntu-latest
    name: Lint PHP Files

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Validate PHP syntax
        run: |
          echo "Validating PHP syntax..."
          find . -name "*.php" -exec php -l {} \;
          echo "PHP syntax validation complete"

  test-integration:
    runs-on: ubuntu-latest
    name: Test AI Integration

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Test ai-init.php
        run: |
          echo "Testing ai-init.php..."
          php -f ai-init.php
          echo "AI init script works"

      - name: Test standalone PHP scanner
        run: |
          echo "Testing standalone PHP scanner..."
          mkdir -p test-project && cd test-project
          cp ../scripts/ecosystem/php-scanner/PhpProjectScanner.php .
          echo '{"name": "test/project", "description": "Test project"}' > composer.json
          php PhpProjectScanner.php
          test -f .ai.json && echo "Standalone PHP scanner works"
          cd .. && rm -rf test-project

      - name: Test direct Composer plugin execution
        run: |
          echo "Testing direct Composer plugin execution..."
          mkdir -p test-plugin && cd test-plugin
          cp -r ../scripts/ecosystem/composer-plugin .
          cp -r ../scripts/ecosystem/php-scanner .
          echo '{"name": "test/project", "description": "Test plugin execution"}' > composer.json
          php composer-plugin/src/ComposerPlugin.php
          test -f .ai.json && echo "Direct composer plugin execution works"
          cd .. && rm -rf test-plugin

      - name: Verify project structure
        run: |
          echo "Verifying project structure..."
          test -f .ai.json.example
          test -f ai-init.php
          test -f schema.json
          echo "Required files present"

      - name: Test example validation
        run: |
          echo "Testing if example validates..."
          npm ci
          npm run validate:example
          echo "Example file validates successfully"

  test-composer-integration:
    runs-on: ubuntu-latest
    name: Test With Composer Installation

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP with Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer:v2

      - name: Verify Composer installation
        run: |
          echo "Verifying Composer installation..."
          composer --version
          echo "Composer is installed"

      - name: Install Composer dependencies for plugin
        run: |
          echo "Installing Composer plugin dependencies..."
          cd scripts/ecosystem/composer-plugin
          composer install
          echo "Dependencies installed"

      - name: Test Composer command execution
        run: |
          echo "Testing Composer plugin command..."
          mkdir -p test-with-composer && cd test-with-composer
          echo '{"name": "test/composer-project", "description": "Test with real Composer"}' > composer.json
          cp -r ../scripts/ecosystem/composer-plugin .
          cd composer-plugin
          composer install
          cd ..

          php -r "require 'composer-plugin/vendor/autoload.php'; \$plugin = new CoreX\\AIMindLayer\\ComposerPlugin(); \$io = new Composer\\IO\\NullIO(); \$plugin->updateAiJson(\$io);"

          test -f .ai.json && echo "Composer plugin works with real Composer installation"
          cat .ai.json
          cd .. && rm -rf test-with-composer
